"""
Demonstra√ß√£o das Funcionalidades do Sistema
==========================================

Este arquivo demonstra como usar todas as funcionalidades do sistema
de agendamento de exames atrav√©s de exemplos pr√°ticos.
"""

from database import DatabaseConnection
from models import ClinicaModel
from datetime import datetime, date
import json

def demonstrar_conexao():
    """Demonstra como gerenciar a conex√£o com o banco"""
    print("=== CONEX√ÉO COM BANCO DE DADOS ===\n")
    
    # Criar inst√¢ncia da conex√£o
    db = DatabaseConnection()
    
    # Mostrar configura√ß√£o atual
    print("Configura√ß√£o atual:")
    print(json.dumps(db.config, indent=2))
    
    # Testar conex√£o
    print(f"\nTeste de conex√£o: {'‚úÖ Sucesso' if db.test_connection() else '‚ùå Falha'}")
    
    # Exemplo de atualiza√ß√£o de configura√ß√£o
    print("\nPara alterar configura√ß√£o:")
    print("db.update_config('localhost', 'clinica_exames', 'root', 'sua_senha')")

def demonstrar_pacientes():
    """Demonstra opera√ß√µes com pacientes"""
    print("\n=== GEST√ÉO DE PACIENTES ===\n")
    
    model = ClinicaModel()
    
    # Listar pacientes existentes
    print("üìã Pacientes cadastrados:")
    pacientes = model.get_pacientes()
    if pacientes:
        for i, pac in enumerate(pacientes[:3]):  # Mostrar apenas 3
            empresa = pac.get('empresa_nome', 'Sem empresa')
            print(f"   {i+1}. {pac['nome']} - {pac['cpf']} - {empresa}")
        
        if len(pacientes) > 3:
            print(f"   ... e mais {len(pacientes) - 3} pacientes")
    else:
        print("   Nenhum paciente encontrado")
    
    # Exemplo de busca espec√≠fica
    if pacientes:
        primeiro_paciente = model.get_paciente_by_id(pacientes[0]['id_paciente'])
        print(f"\nüîç Detalhes do paciente ID {pacientes[0]['id_paciente']}:")
        print(f"   Nome: {primeiro_paciente['nome']}")
        print(f"   Endere√ßo: {primeiro_paciente['endereco']}")
        print(f"   Data Nasc: {primeiro_paciente['data_nasc']}")
    
    # Exemplo de como adicionar paciente
    print("\n‚ûï Exemplo de cadastro de paciente:")
    print("""
    model.add_paciente(
        nome="Jo√£o Silva",
        endereco="Rua das Flores, 123",
        telefone="(53)1234-5678",
        cpf="12345678901",
        data_nasc=date(1990, 5, 15),
        id_empresa=None  # Opcional
    )
    """)

def demonstrar_exames():
    """Demonstra opera√ß√µes com exames"""
    print("\n=== GEST√ÉO DE EXAMES ===\n")
    
    model = ClinicaModel()
    
    # Listar exames por tipo
    exames = model.get_exames()
    if exames:
        tipos = {}
        for exame in exames:
            tipo = exame['tipo']
            if tipo not in tipos:
                tipos[tipo] = []
            tipos[tipo].append(exame)
        
        print("üî¨ Exames por tipo:")
        for tipo, lista in tipos.items():
            print(f"\n   üìå {tipo}:")
            for exame in lista:
                print(f"      ‚Ä¢ {exame['nome']} ({exame['tempo_estimado']} min)")
    
    # Exemplo de cadastro de exame laboratorial
    print("\n‚ûï Exemplo de exame LABORATORIAL:")
    print("""
    model.add_exame(
        nome="Hemograma Completo",
        descricao="An√°lise completa do sangue",
        requisitos="Jejum de 8 horas",
        tempo_estimado=30,
        tipo="LABORATORIAL",
        tempo_coleta_analise=15,
        restricoes_alimentares="Sem √°lcool 24h antes"
    )
    """)
    
    # Exemplo de cadastro de exame de imagem
    print("\n‚ûï Exemplo de exame de IMAGEM:")
    print("""
    model.add_exame(
        nome="Ultrassonografia Abdominal",
        descricao="Exame de imagem do abdome",
        requisitos="Bexiga cheia",
        tempo_estimado=45,
        tipo="IMAGEM",
        tecnologia_utilizada="Ultrassom HD",
        preparos_especiais="Ingerir 1L de √°gua 1h antes"
    )
    """)

def demonstrar_agendamentos():
    """Demonstra opera√ß√µes com agendamentos"""
    print("\n=== GEST√ÉO DE AGENDAMENTOS ===\n")
    
    model = ClinicaModel()
    
    # Mostrar agendamentos recentes
    agendamentos = model.get_agendamentos()
    if agendamentos:
        print("üìÖ Agendamentos recentes:")
        for i, agend in enumerate(agendamentos[:3]):
            data_hora = agend['data_hora'].strftime('%d/%m/%Y %H:%M')
            status_emoji = {
                'AGENDADO': 'üü°',
                'REALIZADO': '‚úÖ', 
                'CANCELADO': '‚ùå'
            }.get(agend['status'], '‚ö™')
            
            print(f"   {i+1}. {status_emoji} {agend['paciente_nome']}")
            print(f"      Exame: {agend['exame_nome']}")
            print(f"      Data: {data_hora}")
            print(f"      Status: {agend['status']}")
            print()
    
    # Exemplo de cria√ß√£o de agendamento
    print("‚ûï Exemplo de novo agendamento:")
    print("""
    # Primeiro, obtenha os IDs necess√°rios:
    pacientes = model.get_pacientes()
    exames = model.get_exames()
    unidades = model.get_unidades()
    
    # Depois crie o agendamento:
    data_hora = datetime(2024, 8, 15, 9, 30)  # 15/08/2024 √†s 09:30
    
    model.add_agendamento(
        id_paciente=pacientes[0]['id_paciente'],
        id_exame=exames[0]['id_exame'],
        id_unidade=unidades[0]['id_unidade'],
        data_hora=data_hora,
        id_profissional=None  # Opcional
    )
    """)
    
    # Exemplo de atualiza√ß√£o de status
    print("\n‚úèÔ∏è Exemplo de atualiza√ß√£o de status:")
    print("""
    model.update_agendamento_status(
        id_agendamento=1,
        status='REALIZADO',
        documentos_ok=True,
        requisitos_ok=True
    )
    """)

def demonstrar_resultados():
    """Demonstra opera√ß√µes com resultados"""
    print("\n=== GEST√ÉO DE RESULTADOS ===\n")
    
    model = ClinicaModel()
    
    # Mostrar resultados existentes
    resultados = model.get_resultados()
    if resultados:
        print("üìã Resultados cadastrados:")
        for i, res in enumerate(resultados[:2]):
            data = res['data_hora'].strftime('%d/%m/%Y')
            print(f"   {i+1}. {res['paciente_nome']} - {res['exame_nome']}")
            print(f"      Data: {data}")
            print(f"      Resultado: {res['resultados'][:50]}...")
            if res.get('recomendacoes'):
                print(f"      Recomenda√ß√µes: {res['recomendacoes'][:50]}...")
            print()
    
    # Exemplo de cadastro de resultado
    print("‚ûï Exemplo de cadastro de resultado:")
    print("""
    model.add_resultado(
        id_agendamento=1,
        resultados="Todos os valores dentro da normalidade. "
                  "Hemoglobina: 14.2 g/dL, Leuc√≥citos: 7.500/ŒºL",
        recomendacoes="Manter h√°bitos saud√°veis. "
                     "Retorno em 6 meses para acompanhamento."
    )
    """)

def demonstrar_relatorios():
    """Demonstra os relat√≥rios dispon√≠veis"""
    print("\n=== RELAT√ìRIOS DISPON√çVEIS ===\n")
    
    model = ClinicaModel()
    
    # Relat√≥rio de exames pr√≥ximos
    print("üìÖ Exames Pr√≥ximos (View):")
    exames_proximos = model.get_exames_proximos()
    if exames_proximos:
        for exame in exames_proximos[:3]:
            prioridade_emoji = {
                'URGENTE': 'üî¥',
                'PR√ìXIMO': 'üü°',
                'FUTURO': 'üü¢'
            }.get(exame['prioridade'], '‚ö™')
            
            data_hora = exame['data_hora'].strftime('%d/%m/%Y %H:%M')
            print(f"   {prioridade_emoji} {exame['prioridade']}: {exame['paciente']}")
            print(f"      {exame['exame']} em {data_hora}")
    else:
        print("   Nenhum exame pr√≥ximo")
    
    # Relat√≥rio por profissional
    print(f"\nüë®‚Äç‚öïÔ∏è Agendamentos por Profissional:")
    por_prof = model.get_agendamentos_por_profissional()
    if por_prof:
        for item in por_prof[:3]:
            print(f"   ‚Ä¢ {item['profissional']}: {item['total']} agendamentos de {item['exame']}")
    else:
        print("   Nenhum dado dispon√≠vel")
    
    # Relat√≥rio por empresa
    print(f"\nüè¢ Pacientes por Empresa:")
    por_empresa = model.get_pacientes_por_empresa()
    if por_empresa:
        empresa_atual = ""
        count = 0
        for item in por_empresa:
            if item['empresa'] != empresa_atual:
                if empresa_atual:  # Se n√£o √© a primeira empresa
                    print()
                empresa_atual = item['empresa']
                print(f"   üìä {empresa_atual}:")
                count = 0
            
            count += 1
            if count <= 2:  # Mostrar apenas 2 pacientes por empresa
                print(f"      ‚Ä¢ {item['paciente']} - {item['cpf']}")
            elif count == 3:
                print("      ‚Ä¢ ...")
    else:
        print("   Nenhum paciente vinculado a empresas")

def demonstrar_interface():
    """Demonstra como usar a interface gr√°fica"""
    print("\n=== INTERFACE GR√ÅFICA ===\n")
    
    print("üñ•Ô∏è Como executar a interface:")
    print("   python main.py")
    print()
    
    print("üé® Funcionalidades da interface:")
    print("   ‚Ä¢ ‚öôÔ∏è Configura√ß√£o do banco via interface")
    print("   ‚Ä¢ üë• Gest√£o completa de pacientes")
    print("   ‚Ä¢ üî¨ Cadastro de exames por tipo")
    print("   ‚Ä¢ üìÖ Cria√ß√£o e controle de agendamentos")
    print("   ‚Ä¢ üìã Registro de resultados")
    print("   ‚Ä¢ üìä Relat√≥rios em tempo real")
    print()
    
    print("üìã Estrutura da interface:")
    print("   1. Aba Pacientes - CRUD completo")
    print("   2. Aba Exames - Cat√°logo por tipos")
    print("   3. Aba Agendamentos - Controle de status")
    print("   4. Aba Resultados - Para exames realizados")
    print("   5. Aba Relat√≥rios - Vis√µes gerenciais")
    print()
    
    print("üí° Dicas:")
    print("   ‚Ä¢ Interface adapta-se automaticamente")
    print("   ‚Ä¢ Valida√ß√µes em tempo real")
    print("   ‚Ä¢ Mensagens claras de erro/sucesso")
    print("   ‚Ä¢ Double-click para editar registros")

def main():
    """Demonstra√ß√£o principal"""
    print("üè• DEMONSTRA√á√ÉO DO SISTEMA DE AGENDAMENTO")
    print("=" * 60)
    
    try:
        # Verificar se sistema est√° configurado
        model = ClinicaModel()
        if not model.test_connection():
            print("‚ùå Sistema n√£o configurado ou banco indispon√≠vel")
            print("   Execute primeiro: python exemplo_uso.py")
            return
        
        # Executar demonstra√ß√µes
        demonstrar_conexao()
        demonstrar_pacientes()
        demonstrar_exames()
        demonstrar_agendamentos()
        demonstrar_resultados()
        demonstrar_relatorios()
        demonstrar_interface()
        
        print("\n" + "=" * 60)
        print("‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA")
        print("   Para usar o sistema: python main.py")
        print("   Para testes: python exemplo_uso.py")
        
    except Exception as e:
        print(f"‚ùå Erro durante demonstra√ß√£o: {e}")
        print("   Verifique se o banco est√° configurado corretamente")

if __name__ == "__main__":
    main()
